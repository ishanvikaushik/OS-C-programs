#include <stdio.h>
#include <unistd.h>  // for fork()
#include <sys/types.h>  // for pid_t
#include <stdlib.h>

#define MAX_PAGES 100
#define MAX_FRAMES 10

void printFrames(int frames[], int numFrames) {
    printf("Frames: ");
    for (int i = 0; i < numFrames; i++) {
        if (frames[i] == -1)
            printf("- ");
        else
            printf("%d ", frames[i]);
    }
}

void fifo(int pages[], int numPages, int numFrames) {
    int frames[MAX_FRAMES];
    int pageFaults = 0, index = 0, frameCount = 0;

    for (int i = 0; i < numFrames; i++) frames[i] = -1;

    printf("\nFIFO Algorithm:\n");
    for (int i = 0; i < numPages; i++) {
        int pageFound = 0;
        for (int j = 0; j < frameCount; j++) {
            if (frames[j] == pages[i]) {
                pageFound = 1;
                break;
            }
        }

        if (!pageFound) {
            if (frameCount < numFrames) {
                frames[frameCount++] = pages[i];
            } else {
                frames[index] = pages[i];
                index = (index + 1) % numFrames;
            }
            pageFaults++;
            printFrames(frames, numFrames);
            printf(" <- Page %d -> Page Fault\n", pages[i]);
        } else {
            printFrames(frames, numFrames);
            printf(" <- Page %d -> No Page Fault\n", pages[i]);
        }
    }

    printf("Total FIFO Page Faults: %d\n", pageFaults);
}

void lru(int pages[], int numPages, int numFrames) {
    int frames[MAX_FRAMES];
    int pageFaults = 0;

    for (int i = 0; i < numFrames; i++) frames[i] = -1;

    printf("\nLRU Algorithm:\n");
    for (int i = 0; i < numPages; i++) {
        int pageFound = 0;
        for (int j = 0; j < numFrames; j++) {
            if (frames[j] == pages[i]) {
                pageFound = 1;
                break;
            }
        }

        if (!pageFound) {
            int emptyIndex = -1;
            for (int j = 0; j < numFrames; j++) {
                if (frames[j] == -1) {
                    emptyIndex = j;
                    break;
                }
            }

            if (emptyIndex != -1) {
                frames[emptyIndex] = pages[i];
            } else {
                int lruIndex = 0, lruTime = i;
                for (int j = 0; j < numFrames; j++) {
                    int lastUsed = -1;
                    for (int k = i - 1; k >= 0; k--) {
                        if (pages[k] == frames[j]) {
                            lastUsed = k;
                            break;
                        }
                    }
                    if (lastUsed < lruTime) {
                        lruTime = lastUsed;
                        lruIndex = j;
                    }
                }
                frames[lruIndex] = pages[i];
            }
            pageFaults++;
            printFrames(frames, numFrames);
            printf(" <- Page %d -> Page Fault\n", pages[i]);
        } else {
            printFrames(frames, numFrames);
            printf(" <- Page %d -> No Page Fault\n", pages[i]);
        }
    }

    printf("Total LRU Page Faults: %d\n", pageFaults);
}

void optimal(int pages[], int numPages, int numFrames) {
    int frames[MAX_FRAMES];
    int pageFaults = 0;

    for (int i = 0; i < numFrames; i++) frames[i] = -1;

    printf("\nOptimal Algorithm:\n");
    for (int i = 0; i < numPages; i++) {
        int pageFound = 0;
        for (int j = 0; j < numFrames; j++) {
            if (frames[j] == pages[i]) {
                pageFound = 1;
                break;
            }
        }

        if (!pageFound) {
            int emptyIndex = -1;
            for (int j = 0; j < numFrames; j++) {
                if (frames[j] == -1) {
                    emptyIndex = j;
                    break;
                }
            }

            if (emptyIndex != -1) {
                frames[emptyIndex] = pages[i];
            } else {
                int farthestIndex = -1, farthestUse = -1;

                for (int j = 0; j < numFrames; j++) {
                    int nextUse = -1;
                    for (int k = i + 1; k < numPages; k++) {
                        if (pages[k] == frames[j]) {
                            nextUse = k;
                            break;
                        }
                    }
                    if (nextUse == -1) {
                        farthestIndex = j;
                        break;
                    }
                    if (nextUse > farthestUse) {
                        farthestUse = nextUse;
                        farthestIndex = j;
                    }
                }

                frames[farthestIndex] = pages[i];
            }
            pageFaults++;
            printFrames(frames, numFrames);
            printf(" <- Page %d -> Page Fault\n", pages[i]);
        } else {
            printFrames(frames, numFrames);
            printf(" <- Page %d -> No Page Fault\n", pages[i]);
        }
    }

    printf("Total Optimal Page Faults: %d\n", pageFaults);
}

int main() {
    int pages[MAX_PAGES];
    int numPages, numFrames;

    printf("Enter number of pages: ");
    scanf("%d", &numPages);
    if (numPages > MAX_PAGES) {
        printf("Too many pages! Max allowed is %d.\n", MAX_PAGES);
        return 1;
    }

    printf("Enter the page reference string:\n");
    for (int i = 0; i < numPages; i++) {
        scanf("%d", &pages[i]);
    }

    printf("Enter number of frames: ");
    scanf("%d", &numFrames);
    if (numFrames > MAX_FRAMES) {
        printf("Too many frames! Max allowed is %d.\n", MAX_FRAMES);
        return 1;
    }

    pid_t pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        return 1;
    }

    if (pid == 0) {
        // Child process: LRU and Optimal
        lru(pages, numPages, numFrames);
        optimal(pages, numPages, numFrames);
    } else {
        // Parent process: FIFO
        fifo(pages, numPages, numFrames);
    }

    return 0;
}

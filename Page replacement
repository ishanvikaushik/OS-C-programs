#include <stdio.h>
#include <stdlib.h>

#define MAX 100

int is_in_frames(int frame[], int frame_count, int page) {
    for (int i = 0; i < frame_count; i++) {
        if (frame[i] == page) return 1;
    }
    return 0;
}

int find_lru_index(int frames[], int frame_count, int ref[], int current_index) {
    int least_recent[MAX], i, j;

    for (i = 0; i < frame_count; i++) {
        for (j = current_index - 1; j >= 0; j--) {
            if (frames[i] == ref[j]) {
                least_recent[i] = j;
                break;
            }
        }
        if (j == -1) least_recent[i] = -1; // never used
    }

    int min_index = 0;
    for (i = 1; i < frame_count; i++) {
        if (least_recent[i] < least_recent[min_index]) {
            min_index = i;
        }
    }
    return min_index;
}

int find_optimal_index(int frames[], int frame_count, int ref[], int current_index, int ref_len) {
    int future[MAX], i, j;

    for (i = 0; i < frame_count; i++) {
        future[i] = -1;
        for (j = current_index + 1; j < ref_len; j++) {
            if (frames[i] == ref[j]) {
                future[i] = j;
                break;
            }
        }
    }

    int farthest = 0;
    for (i = 1; i < frame_count; i++) {
        if (future[i] == -1) return i; // Not used again
        if (future[i] > future[farthest]) {
            farthest = i;
        }
    }
    return farthest;
}

void fifo(int ref[], int n, int frame_count) {
    int frames[MAX], front = 0, count = 0, page_faults = 0;

    for (int i = 0; i < frame_count; i++) frames[i] = -1;

    printf("\nFIFO:\n");
    for (int i = 0; i < n; i++) {
        if (!is_in_frames(frames, frame_count, ref[i])) {
            frames[front] = ref[i];
            front = (front + 1) % frame_count;
            page_faults++;
        }
        printf("Step %d: ", i + 1);
        for (int j = 0; j < frame_count; j++)
            if (frames[j] == -1) printf("- ");
            else printf("%d ", frames[j]);
        printf("\n");
    }
    printf("Total Page Faults: %d\n", page_faults);
}

void lru(int ref[], int n, int frame_count) {
    int frames[MAX], page_faults = 0, count = 0;

    for (int i = 0; i < frame_count; i++) frames[i] = -1;

    printf("\nLRU:\n");
    for (int i = 0; i < n; i++) {
        if (!is_in_frames(frames, frame_count, ref[i])) {
            if (count < frame_count) {
                frames[count++] = ref[i];
            } else {
                int index = find_lru_index(frames, frame_count, ref, i);
                frames[index] = ref[i];
            }
            page_faults++;
        }
        printf("Step %d: ", i + 1);
        for (int j = 0; j < frame_count; j++)
            if (frames[j] == -1) printf("- ");
            else printf("%d ", frames[j]);
        printf("\n");
    }
    printf("Total Page Faults: %d\n", page_faults);
}

void optimal(int ref[], int n, int frame_count) {
    int frames[MAX], page_faults = 0, count = 0;

    for (int i = 0; i < frame_count; i++) frames[i] = -1;

    printf("\nOptimal:\n");
    for (int i = 0; i < n; i++) {
        if (!is_in_frames(frames, frame_count, ref[i])) {
            if (count < frame_count) {
                frames[count++] = ref[i];
            } else {
                int index = find_optimal_index(frames, frame_count, ref, i, n);
                frames[index] = ref[i];
            }
            page_faults++;
        }
        printf("Step %d: ", i + 1);
        for (int j = 0; j < frame_count; j++)
            if (frames[j] == -1) printf("- ");
            else printf("%d ", frames[j]);
        printf("\n");
    }
    printf("Total Page Faults: %d\n", page_faults);
}

int main() {
    int n, ref[MAX], frame_count;

    printf("Enter number of page references: ");
    scanf("%d", &n);
    printf("Enter page reference string:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &ref[i]);
    }

    printf("Enter number of frames: ");
    scanf("%d", &frame_count);

    fifo(ref, n, frame_count);
    lru(ref, n, frame_count);
    optimal(ref, n, frame_count);

    return 0;
}

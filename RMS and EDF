#include <stdio.h>

#define MAX 10

// Function to calculate CPU utilization
float calculate_utilization(int execution[], int period[], int n) {
    float total = 0;
    for (int i = 0; i < n; i++)
        total += (float)execution[i] / period[i];
    return total;
}

// Rate-Monotonic Scheduling
void rate_monotonic(int execution[], int period[], int deadline[], int n, int simulation_time) {
    printf("\n--- Rate-Monotonic Scheduling (RMS) ---\n");
    float util = calculate_utilization(execution, period, n);
    printf("CPU Utilization: %.2f\n", util);

    int remaining[MAX] = {0};
    int next_arrival[MAX] = {0};

    for (int time = 0; time < simulation_time; time++) {
        int selected = -1;

        // Check for arrival of new jobs
        for (int i = 0; i < n; i++) {
            if (time == next_arrival[i]) {
                remaining[i] = execution[i];
                next_arrival[i] += period[i];
            }
        }

        // Select task with the shortest period (highest priority)
        for (int i = 0; i < n; i++) {
            if (remaining[i] > 0) {
                if (selected == -1 || period[i] < period[selected])
                    selected = i;
            }
        }

        // Execute task or idle
        if (selected != -1) {
            printf("Time %d: Executing Task %d\n", time, selected + 1);
            remaining[selected]--;
        } else {
            printf("Time %d: Idle\n", time);
        }
    }
}

// Earliest-Deadline-First Scheduling
void earliest_deadline_first(int execution[], int period[], int deadline[], int n, int simulation_time) {
    printf("\n--- Earliest-Deadline-First Scheduling (EDF) ---\n");
    float util = calculate_utilization(execution, period, n);
    printf("CPU Utilization: %.2f\n", util);

    int remaining[MAX] = {0};
    int next_arrival[MAX] = {0};
    int abs_deadline[MAX] = {0};

    for (int time = 0; time < simulation_time; time++) {
        int selected = -1;

        // Check for new arrivals and assign deadlines
        for (int i = 0; i < n; i++) {
            if (time == next_arrival[i]) {
                remaining[i] = execution[i];
                abs_deadline[i] = time + deadline[i];  // Absolute deadline
                next_arrival[i] += period[i];
            }
        }

        // Choose task with earliest absolute deadline
        for (int i = 0; i < n; i++) {
            if (remaining[i] > 0) {
                if (selected == -1 || abs_deadline[i] < abs_deadline[selected])
                    selected = i;
            }
        }

        // Execute or Idle
        if (selected != -1) {
            printf("Time %d: Executing Task %d\n", time, selected + 1);
            remaining[selected]--;
        } else {
            printf("Time %d: Idle\n", time);
        }
    }
}

// Main function
int main() {
    int n, simulation_time;
    int execution[MAX], period[MAX], deadline[MAX];

    printf("Enter number of tasks: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("\n--- Task %d ---\n", i + 1);
        printf("Execution Time: ");
        scanf("%d", &execution[i]);
        printf("Period: ");
        scanf("%d", &period[i]);
        printf("Relative Deadline: ");
        scanf("%d", &deadline[i]);
    }

    printf("\nEnter total simulation time: ");
    scanf("%d", &simulation_time);

    rate_monotonic(execution, period, deadline, n, simulation_time);
    earliest_deadline_first(execution, period, deadline, n, simulation_time);

    return 0;
}

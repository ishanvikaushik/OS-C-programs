#include <stdio.h>
#define MAX 100

void print(char *method, int alloc[], int temp[], int process[], int p) {

    printf("\n-- %s Allocation --\n", method);
    for (int i = 0; i < p; i++) {
        printf("Process %d -> ", i + 1);
        if (alloc[i] != -1) {
            printf("Block %d\n", alloc[i] + 1);

        } else {
            printf("Not allocated\n");
        }
    }

}

void firstfit(int blocks[], int b, int process[], int p) {
    int alloc[MAX], temp[MAX];
    for (int i = 0; i < p; i++) alloc[i] = -1;
    for (int i = 0; i < b; i++) temp[i] = blocks[i];

    for (int i = 0; i < p; i++) {
        for (int j = 0; j < b; j++) {
            if (temp[j] >= process[i]) {
                alloc[i] = j;
                temp[j] -= process[i];
                break;
            }
        }
    }
    print("First Fit", alloc, temp, process, p);
}

void lastfit(int blocks[], int b, int process[], int p) {
    int alloc[MAX], temp[MAX];
    for (int i = 0; i < p; i++) alloc[i] = -1;
    for (int i = 0; i < b; i++) temp[i] = blocks[i];

    for (int i = 0; i < p; i++) {
        for (int j = b - 1; j >= 0; j--) {
            if (temp[j] >= process[i]) {
                alloc[i] = j;
                temp[j] -= process[i];
                break;
            }
        }
    }
    print("Last Fit", alloc, temp, process, p);
}

void bestfit(int blocks[], int b, int process[], int p) {
    int alloc[MAX], temp[MAX];
    for (int i = 0; i < p; i++) alloc[i] = -1;
    for (int i = 0; i < b; i++) temp[i] = blocks[i];

    for (int i = 0; i < p; i++) {
        int best = -1;
        for (int j = 0; j < b; j++) {
            if (temp[j] >= process[i]) {
                if (best == -1 || temp[j] < temp[best]) {
                    best = j;
                }
            }
        }
        if (best != -1) {
            alloc[i] = best;
            temp[best] -= process[i];
        }
    }
    print("Best Fit", alloc, temp, process, p);
}

void worstfit(int blocks[], int b, int process[], int p) {
    int alloc[MAX], temp[MAX];
    for (int i = 0; i < p; i++) alloc[i] = -1;
    for (int i = 0; i < b; i++) temp[i] = blocks[i];

    for (int i = 0; i < p; i++) {
        int worst = -1;
        for (int j = 0; j < b; j++) {
            if (temp[j] >= process[i]) {
                if (worst == -1 || temp[j] > temp[worst]) {
                    worst = j;
                }
            }
        }
        if (worst != -1) {
            alloc[i] = worst;
            temp[worst] -= process[i];
        }
    }
    print("Worst Fit", alloc, temp, process, p);
}

int main() {
    int p, b;
    printf("Enter number of blocks and processes:\n");
    scanf("%d %d", &b, &p);

    int blocks[b], original_blocks[b], process[p];
    printf("Enter size of blocks:\n");
    for (int i = 0; i < b; i++) {
        scanf("%d", &blocks[i]);

    }

    printf("Enter size of processes:\n");
    for (int i = 0; i < p; i++) {
        scanf("%d", &process[i]);
    }

    firstfit(blocks, b, process, p);
    lastfit(blocks, b, process, p);
    bestfit(blocks, b, process, p);
    worstfit(blocks, b, process, p);

    return 0;
}


or
#include <stdio.h>

#define MAX 100

struct Hole {
    int id;
    int size;
    int originalSize;
};

struct Process {
    int id;
    int size;
    int allocatedHole;
    int internalFrag;
};

void firstFit(struct Hole holes[], int nh, struct Process processes[], int np) {
    int totalInternalFrag = 0;
    for (int i = 0; i < np; i++) {
        processes[i].allocatedHole = -1;
        processes[i].internalFrag = 0;
        for (int j = 0; j < nh; j++) {
            if (holes[j].size >= processes[i].size) {
                processes[i].allocatedHole = holes[j].id;
                processes[i].internalFrag = holes[j].size - processes[i].size;
                holes[j].size -= processes[i].size;
                totalInternalFrag += processes[i].internalFrag;
                break;
            }
        }
    }
    printf("\n--- First Fit Allocation ---\n");
    for (int i = 0; i < np; i++) {
        printf("Process %d (Size %d): ", processes[i].id, processes[i].size);
        if (processes[i].allocatedHole != -1)
            printf("Allocated to Hole %d (Internal Fragmentation = %d)\n", processes[i].allocatedHole, processes[i].internalFrag);
        else
            printf("Not Allocated\n");
    }
    printf("\nFinal Hole Availability:\n");
    for (int i = 0; i < nh; i++)
        printf("Hole %d: Original = %d, Remaining = %d\n", holes[i].id, holes[i].originalSize, holes[i].size);
    printf("Total Internal Fragmentation (First Fit): %d\n", totalInternalFrag);
}

void bestFit(struct Hole holes[], int nh, struct Process processes[], int np) {
    int totalInternalFrag = 0;
    for (int i = 0; i < nh; i++)
        holes[i].size = holes[i].originalSize;
    for (int i = 0; i < np; i++) {
        processes[i].allocatedHole = -1;
        processes[i].internalFrag = 0;
        int bestIndex = -1;
        for (int j = 0; j < nh; j++) {
            if (holes[j].size >= processes[i].size) {
                if (bestIndex == -1 || holes[j].size < holes[bestIndex].size) {
                    bestIndex = j;
                }
            }
        }
        if (bestIndex != -1) {
            processes[i].allocatedHole = holes[bestIndex].id;
            processes[i].internalFrag = holes[bestIndex].size - processes[i].size;
            holes[bestIndex].size -= processes[i].size;
            totalInternalFrag += processes[i].internalFrag;
        }
    }
    printf("\n--- Best Fit Allocation ---\n");
    for (int i = 0; i < np; i++) {
        printf("Process %d (Size %d): ", processes[i].id, processes[i].size);
        if (processes[i].allocatedHole != -1)
            printf("Allocated to Hole %d (Internal Fragmentation = %d)\n", processes[i].allocatedHole, processes[i].internalFrag);
        else
            printf("Not Allocated\n");
    }
    printf("\nFinal Hole Availability:\n");
    for (int i = 0; i < nh; i++)
        printf("Hole %d: Original = %d, Remaining = %d\n", holes[i].id, holes[i].originalSize, holes[i].size);
    printf("Total Internal Fragmentation (Best Fit): %d\n", totalInternalFrag);
}

void worstFit(struct Hole holes[], int nh, struct Process processes[], int np) {
    int totalInternalFrag = 0;
    for (int i = 0; i < nh; i++)
        holes[i].size = holes[i].originalSize;
    for (int i = 0; i < np; i++) {
        processes[i].allocatedHole = -1;
        processes[i].internalFrag = 0;
        int worstIndex = -1;
        for (int j = 0; j < nh; j++) {
            if (holes[j].size >= processes[i].size) {
                if (worstIndex == -1 || holes[j].size > holes[worstIndex].size) {
                    worstIndex = j;
                }
            }
        }
        if (worstIndex != -1) {
            processes[i].allocatedHole = holes[worstIndex].id;
            processes[i].internalFrag = holes[worstIndex].size - processes[i].size;
            holes[worstIndex].size -= processes[i].size;
            totalInternalFrag += processes[i].internalFrag;
        }
    }
    printf("\n--- Worst Fit Allocation ---\n");
    for (int i = 0; i < np; i++) {
        printf("Process %d (Size %d): ", processes[i].id, processes[i].size);
        if (processes[i].allocatedHole != -1)
            printf("Allocated to Hole %d (Internal Fragmentation = %d)\n", processes[i].allocatedHole, processes[i].internalFrag);
        else
            printf("Not Allocated\n");
    }
    printf("\nFinal Hole Availability:\n");
    for (int i = 0; i < nh; i++)
        printf("Hole %d: Original = %d, Remaining = %d\n", holes[i].id, holes[i].originalSize, holes[i].size);
    printf("Total Internal Fragmentation (Worst Fit): %d\n", totalInternalFrag);
}

void lastFit(struct Hole holes[], int nh, struct Process processes[], int np) {
    int totalInternalFrag = 0;
    for (int i = 0; i < nh; i++)
        holes[i].size = holes[i].originalSize;
    for (int i = 0; i < np; i++) {
        processes[i].allocatedHole = -1;
        processes[i].internalFrag = 0;
        for (int j = nh - 1; j >= 0; j--) {
            if (holes[j].size >= processes[i].size) {
                processes[i].allocatedHole = holes[j].id;
                processes[i].internalFrag = holes[j].size - processes[i].size;
                holes[j].size -= processes[i].size;
                totalInternalFrag += processes[i].internalFrag;
                break;
            }
        }
    }
    printf("\n--- Last Fit Allocation ---\n");
    for (int i = 0; i < np; i++) {
        printf("Process %d (Size %d): ", processes[i].id, processes[i].size);
        if (processes[i].allocatedHole != -1)
            printf("Allocated to Hole %d (Internal Fragmentation = %d)\n", processes[i].allocatedHole, processes[i].internalFrag);
        else
            printf("Not Allocated\n");
    }
    printf("\nFinal Hole Availability:\n");
    for (int i = 0; i < nh; i++)
        printf("Hole %d: Original = %d, Remaining = %d\n", holes[i].id, holes[i].originalSize, holes[i].size);
    printf("Total Internal Fragmentation (Last Fit): %d\n", totalInternalFrag);
}

void nextFit(struct Hole holes[], int nh, struct Process processes[], int np) {
    int totalInternalFrag = 0;
    for (int i = 0; i < nh; i++)
        holes[i].size = holes[i].originalSize;
    int lastIndex = 0;
    for (int i = 0; i < np; i++) {
        processes[i].allocatedHole = -1;
        processes[i].internalFrag = 0;
        int count = 0, j = lastIndex;
        while (count < nh) {
            if (holes[j].size >= processes[i].size) {
                processes[i].allocatedHole = holes[j].id;
                processes[i].internalFrag = holes[j].size - processes[i].size;
                holes[j].size -= processes[i].size;
                totalInternalFrag += processes[i].internalFrag;
                lastIndex = j; // update last allocated hole index
                break;
            }
            j = (j + 1) % nh;
            count++;
        }
    }
    printf("\n--- Next Fit Allocation ---\n");
    for (int i = 0; i < np; i++) {
        printf("Process %d (Size %d): ", processes[i].id, processes[i].size);
        if (processes[i].allocatedHole != -1)
            printf("Allocated to Hole %d (Internal Fragmentation = %d)\n", processes[i].allocatedHole, processes[i].internalFrag);
        else
            printf("Not Allocated\n");
    }
    printf("\nFinal Hole Availability:\n");
    for (int i = 0; i < nh; i++)
        printf("Hole %d: Original = %d, Remaining = %d\n", holes[i].id, holes[i].originalSize, holes[i].size);
    printf("Total Internal Fragmentation (Next Fit): %d\n", totalInternalFrag);
}

int main() {
    struct Hole holes[MAX];
    struct Process processes[MAX];
    int nh, np;
    printf("Enter number of memory holes: ");
    scanf("%d", &nh);
    for (int i = 0; i < nh; i++) {
        printf("Enter size of Hole %d: ", i + 1);
        scanf("%d", &holes[i].size);
        holes[i].originalSize = holes[i].size;
        holes[i].id = i + 1;
    }
    printf("Enter number of processes: ");
    scanf("%d", &np);
    for (int i = 0; i < np; i++) {
        printf("Enter size of Process %d: ", i + 1);
        scanf("%d", &processes[i].size);
        processes[i].id = i + 1;
    }
    firstFit(holes, nh, processes, np);
    for (int i = 0; i < nh; i++) holes[i].size = holes[i].originalSize;
    bestFit(holes, nh, processes, np);
    for (int i = 0; i < nh; i++) holes[i].size = holes[i].originalSize;
    worstFit(holes, nh, processes, np);
    for (int i = 0; i < nh; i++) holes[i].size = holes[i].originalSize;
    lastFit(holes, nh, processes, np);
    for (int i = 0; i < nh; i++) holes[i].size = holes[i].originalSize;
    nextFit(holes, nh, processes, np);
    return 0;
}

or
void resetHoles(struct Hole holes[], int nh) {
    for (int i = 0; i < nh; i++) {
        holes[i].size = holes[i].originalSize;
    }
}

void inputHoles(struct Hole holes[], int *nh) {
    printf("Enter number of memory holes: ");
    scanf("%d", nh);
    for (int i = 0; i < *nh; i++) {
        printf("Enter size of Hole %d: ", i + 1);
        scanf("%d", &holes[i].size);
        holes[i].originalSize = holes[i].size;
        holes[i].id = i + 1;
    }
}

void inputProcesses(struct Process processes[], int *np) {
    printf("Enter number of processes: ");
    scanf("%d", np);
    for (int i = 0; i < *np; i++) {
        printf("Enter size of Process %d: ", i + 1);
        scanf("%d", &processes[i].size);
        processes[i].id = i + 1;
    }
}

int main() {
    struct Hole holes[MAX];
    struct Process processes[MAX];
    int nh = 0, np = 0, choice;

    inputHoles(holes, &nh);
    inputProcesses(processes, &np);

    do {
        printf("\n---- Memory Allocation Menu ----\n");
        printf("1. First Fit\n");
        printf("2. Best Fit\n");
        printf("3. Worst Fit\n");
        printf("4. Last Fit\n");
        printf("5. Next Fit\n");
        printf("6. Re-enter Holes and Processes\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        resetHoles(holes, nh);  // Reset memory holes before every allocation

        switch (choice) {
            case 1:
                firstFit(holes, nh, processes, np);
                break;
            case 2:
                bestFit(holes, nh, processes, np);
                break;
            case 3:
                worstFit(holes, nh, processes, np);
                break;
            case 4:
                lastFit(holes, nh, processes, np);
                break;
            case 5:
                nextFit(holes, nh, processes, np);
                break;
            case 6:
                inputHoles(holes, &nh);
                inputProcesses(processes, &np);
                break;
            case 0:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }

    } while (choice != 0);

    return 0;
}
